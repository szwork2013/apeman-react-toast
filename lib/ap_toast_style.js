/**
 * Style for ApToast.
 * @constructor ApToastStyle
 */

"use strict";

const React = require('react'),
      types = React.PropTypes,
      extend = require('extend'),
      ApStyle = require('apeman-react-style')['ApStyle'];

/** @lends ApToastStyle */
let ApToastStyle = React.createClass({
    displayName: 'ApToastStyle',

    propTypes: {
        scoped: types.bool,
        style: types.object,
        normalColor: types.string,
        infoColor: types.string,
        warnColor: types.string,
        errorColor: types.string
    },
    getDefaultProps: function () {
        return {
            scoped: false,
            style: {},
            normalColor: '#555',
            infoColor: '#17B917',
            warnColor: '#929211',
            errorColor: '#B31818'
        };
    },
    render: function () {
        let s = this,
            props = s.props;

        let normalColor = props.normalColor,
            infoColor = props.infoColor,
            warnColor = props.warnColor,
            errorColor = props.errorColor;

        let data = {
            '.ap-toast-group': {
                position: `fixed`,
                display: `block`,
                height: `1px`,
                top: 0,
                left: 0,
                right: 0,
                textAlign: `center`,
                padding: `4px 0`
            },
            '.ap-toast': {
                display: `block`,
                margin: `0 auto`
            },
            '.ap-toast-inner': {
                margin: `4px auto`,
                maxWidth: `420px`,
                display: `inline-block`,
                textAlign: `left`,
                padding: `2px 4px`,
                boxShadow: `1px 1px 2px rgba(0,0,0,0.33)`,
                backgroundColor: `rgba(255, 255, 255, 0.8)`,
                color: `${ normalColor }`,
                border: `1px solid ${ normalColor }`,
                fontSize: `14px`,
                width: `240px`
            },
            '.ap-toast-item': {
                display: `block`,
                padding: `2px 0`
            },
            '.ap-toast-item:active': {
                opacity: 0.8
            },
            '.ap-info-toast .ap-toast-inner': {
                color: `${ infoColor }`,
                border: `1px solid ${ infoColor }`
            },
            '.ap-warn-toast .ap-toast-inner': {
                color: `${ warnColor }`,
                border: `1px solid ${ warnColor }`
            },
            '.ap-error-toast .ap-toast-inner': {
                color: `${ errorColor }`,
                border: `1px solid ${ errorColor }`
            },
            '.ap-toast-item-icon': {
                display: `inline-block`
            },
            '.ap-toast-text': {
                display: `inline-block`,
                margin: `0 2px`,
                cursor: `default`
            }
        },
            smallMediaData = {},
            mediumMediaData = {},
            largeMediaData = {};
        return React.createElement(
            ApStyle,
            { scoped: props.scoped,
                data: extend(data, props.style),
                smallMediaData: smallMediaData,
                mediumMediaData: mediumMediaData,
                largeMediaData: largeMediaData
            },
            props.children
        );
    }
});

module.exports = ApToastStyle;
//# sourceMappingURL=data:application/json;base64,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IjoiL1VzZXJzL29rdW5pc2hpdGFrYS9wcm9qZWN0cy9hcGVtYW4tcmVhY3QtbGFiby9hcGVtYW4tcmVhY3QtdG9hc3QvbGliL2pzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU3R5bGUgZm9yIEFwVG9hc3QuXG4gKiBAY29uc3RydWN0b3IgQXBUb2FzdFN0eWxlXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKSxcbiAgICB0eXBlcyA9IFJlYWN0LlByb3BUeXBlcyxcbiAgICBleHRlbmQgPSByZXF1aXJlKCdleHRlbmQnKSxcbiAgICBBcFN0eWxlID0gcmVxdWlyZSgnYXBlbWFuLXJlYWN0LXN0eWxlJylbJ0FwU3R5bGUnXTtcblxuLyoqIEBsZW5kcyBBcFRvYXN0U3R5bGUgKi9cbmxldCBBcFRvYXN0U3R5bGUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAgcHJvcFR5cGVzOiB7XG4gICAgICAgIHNjb3BlZDogdHlwZXMuYm9vbCxcbiAgICAgICAgc3R5bGU6IHR5cGVzLm9iamVjdCxcbiAgICAgICAgbm9ybWFsQ29sb3I6IHR5cGVzLnN0cmluZyxcbiAgICAgICAgaW5mb0NvbG9yOiB0eXBlcy5zdHJpbmcsXG4gICAgICAgIHdhcm5Db2xvcjogdHlwZXMuc3RyaW5nLFxuICAgICAgICBlcnJvckNvbG9yOiB0eXBlcy5zdHJpbmdcbiAgICB9LFxuICAgIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2NvcGVkOiBmYWxzZSxcbiAgICAgICAgICAgIHN0eWxlOiB7fSxcbiAgICAgICAgICAgIG5vcm1hbENvbG9yOiAnIzU1NScsXG4gICAgICAgICAgICBpbmZvQ29sb3I6ICcjMTdCOTE3JyxcbiAgICAgICAgICAgIHdhcm5Db2xvcjogJyM5MjkyMTEnLFxuICAgICAgICAgICAgZXJyb3JDb2xvcjogJyNCMzE4MTgnXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICBsZXQgcyA9IHRoaXMsXG4gICAgICAgICAgICBwcm9wcyA9IHMucHJvcHM7XG5cbiAgICAgICAgbGV0IG5vcm1hbENvbG9yID0gcHJvcHMubm9ybWFsQ29sb3IsXG4gICAgICAgICAgICBpbmZvQ29sb3IgPSBwcm9wcy5pbmZvQ29sb3IsXG4gICAgICAgICAgICB3YXJuQ29sb3IgPSBwcm9wcy53YXJuQ29sb3IsXG4gICAgICAgICAgICBlcnJvckNvbG9yID0gcHJvcHMuZXJyb3JDb2xvcjtcblxuICAgICAgICBsZXQgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAnLmFwLXRvYXN0LWdyb3VwJzoge1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYGZpeGVkYCxcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogYGJsb2NrYCxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBgMXB4YCxcbiAgICAgICAgICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgICAgICByaWdodDogMCxcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduOiBgY2VudGVyYCxcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogYDRweCAwYFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJy5hcC10b2FzdCc6IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogYGJsb2NrYCxcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiBgMCBhdXRvYFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJy5hcC10b2FzdC1pbm5lcic6IHtcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiBgNHB4IGF1dG9gLFxuICAgICAgICAgICAgICAgICAgICBtYXhXaWR0aDogYDQyMHB4YCxcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogYGlubGluZS1ibG9ja2AsXG4gICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbjogYGxlZnRgLFxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiBgMnB4IDRweGAsXG4gICAgICAgICAgICAgICAgICAgIGJveFNoYWRvdzogYDFweCAxcHggMnB4IHJnYmEoMCwwLDAsMC4zMylgLFxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuOClgLFxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogYCR7bm9ybWFsQ29sb3J9YCxcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiBgMXB4IHNvbGlkICR7bm9ybWFsQ29sb3J9YCxcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6IGAxNHB4YCxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGAyNDBweGBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICcuYXAtdG9hc3QtaXRlbSc6IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogYGJsb2NrYCxcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogYDJweCAwYFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJy5hcC10b2FzdC1pdGVtOmFjdGl2ZSc6IHtcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMC44XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAnLmFwLWluZm8tdG9hc3QgLmFwLXRvYXN0LWlubmVyJzoge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogYCR7aW5mb0NvbG9yfWAsXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlcjogYDFweCBzb2xpZCAke2luZm9Db2xvcn1gXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAnLmFwLXdhcm4tdG9hc3QgLmFwLXRvYXN0LWlubmVyJzoge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogYCR7d2FybkNvbG9yfWAsXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlcjogYDFweCBzb2xpZCAke3dhcm5Db2xvcn1gXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAnLmFwLWVycm9yLXRvYXN0IC5hcC10b2FzdC1pbm5lcic6IHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IGAke2Vycm9yQ29sb3J9YCxcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiBgMXB4IHNvbGlkICR7ZXJyb3JDb2xvcn1gXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAnLmFwLXRvYXN0LWl0ZW0taWNvbic6IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogYGlubGluZS1ibG9ja2BcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICcuYXAtdG9hc3QtdGV4dCc6IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogYGlubGluZS1ibG9ja2AsXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbjogYDAgMnB4YCxcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBgZGVmYXVsdGBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc21hbGxNZWRpYURhdGEgPSB7fSxcbiAgICAgICAgICAgIG1lZGl1bU1lZGlhRGF0YSA9IHt9LFxuICAgICAgICAgICAgbGFyZ2VNZWRpYURhdGEgPSB7fTtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxBcFN0eWxlIHNjb3BlZD17cHJvcHMuc2NvcGVkfVxuICAgICAgICAgICAgICAgICAgICAgZGF0YT17ZXh0ZW5kKGRhdGEsIHByb3BzLnN0eWxlKX1cbiAgICAgICAgICAgICAgICAgICAgIHNtYWxsTWVkaWFEYXRhPXtzbWFsbE1lZGlhRGF0YX1cbiAgICAgICAgICAgICAgICAgICAgIG1lZGl1bU1lZGlhRGF0YT17bWVkaXVtTWVkaWFEYXRhfVxuICAgICAgICAgICAgICAgICAgICAgbGFyZ2VNZWRpYURhdGE9e2xhcmdlTWVkaWFEYXRhfVxuICAgICAgICAgICAgPntwcm9wcy5jaGlsZHJlbn08L0FwU3R5bGU+XG4gICAgICAgICk7XG4gICAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXBUb2FzdFN0eWxlO1xuIl19