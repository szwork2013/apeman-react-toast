/**
 * Toast components.
 * @constructor ApToast
 */

"use strict";

const React = require('react'),
      extend = require('extend'),
      classnames = require('classnames'),
      arrayfilter = require('arrayfilter'),
      types = React.PropTypes,
      ApTouchable = require('apeman-react-touchable')['ApTouchable'],
      ApIcon = require('apeman-react-icon')['ApIcon'];

/** @lends ApToast */
let ApToast = React.createClass({
    displayName: 'ApToast',

    //--------------------
    // Specs
    //--------------------

    propTypes: {
        message: types.string,
        duration: types.number,
        icon: types.string
    },

    mixins: [],

    statics: {},

    getInitialState: function () {
        return {
            items: ''
        };
    },

    getDefaultProps: function () {
        return {
            message: null,
            duration: 2000,
            icon: null
        };
    },

    render: function () {
        let s = this,
            state = s.state,
            props = s.props;

        let valid = state.items.length;
        if (!valid) {
            return null;
        }
        return React.createElement(
            'div',
            { className: classnames('ap-toast', props.className, {}),
                style: extend({}, props.style) },
            React.createElement(
                'div',
                { className: 'ap-toast-inner' },
                s._renderToastItem()
            )
        );
    },

    //--------------------
    // Lifecycle
    //--------------------

    componentWillMount: function () {
        let s = this;
    },

    componentDidMount: function () {
        let s = this,
            props = s.props;
        s.startTicking();
        s.pushToastItem(props.message);
    },

    componentWillReceiveProps: function (nextProps) {
        let s = this;
        s.pushToastItem(nextProps.message);
    },

    shouldComponentUpdate: function (nextProps, nextState) {
        let s = this;
        return true;
    },

    componentWillUpdate: function (nextProps, nextState) {
        let s = this;
    },

    componentDidUpdate: function (prevProps, prevState) {
        let s = this;
    },

    componentWillUnmount: function () {
        let s = this;
        s.stopTicking();
    },

    //------------------
    // Helper
    //------------------
    startTicking: function () {
        let s = this;
        clearTimeout(s._tickTimer);
        s._ticking = true;
        s.doTick();
    },
    stopTicking: function () {
        let s = this;
        clearTimeout(s._tickTimer);
        s._ticking = false;
    },
    doTick: function () {
        let s = this,
            props = s.props;
        if (!s._ticking) {
            return;
        }
        s._tickTimer = setTimeout(() => {
            s.shiftToastItem();
            s.doTick();
        }, props.duration);
    },
    pushToastItem: function (message) {
        let s = this;
        if (!message) {
            return;
        }
        let items = (s.state.items || '').split(',');
        let duplicate = items[items.length - 1] === message;
        if (duplicate) {
            return;
        }
        s.setState({
            items: items.concat(message).join(',')
        });
    },
    shiftToastItem: function () {
        let s = this;
        let items = (s.state.items || '').split(',');
        if (!items.length) {
            return;
        }
        s.setState({
            items: items.slice(1).join(',')
        });
    },
    dismissToastItem: function (message) {
        let s = this;
        let items = (s.state.items || '').split(',');
        s.setState({
            items: items.filter(filtering => {
                return filtering != message;
            })
        });
    },
    //------------------
    // Private
    //------------------
    _ticking: false,
    _tickTimer: null,
    _renderToastItem: function () {
        let s = this,
            props = s.props,
            state = s.state;
        return (state.items || '').split(',').filter(arrayfilter.emptyReject()).map((text, i) => {
            return React.createElement(
                'div',
                { key: `toast-${ i }` },
                React.createElement(
                    ApTouchable,
                    { onTap: () => s.dismissToastItem(text) },
                    React.createElement(
                        'div',
                        { className: 'ap-toast-item' },
                        React.createElement(ApIcon, { className: classnames('ap-toast-item-icon', props.icon) }),
                        React.createElement(
                            'span',
                            { className: 'ap-toast-text' },
                            text
                        )
                    )
                )
            );
        });
    }
});

module.exports = ApToast;
//# sourceMappingURL=data:application/json;base64,